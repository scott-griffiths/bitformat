name: Build

on:
  push:
    branches: [stable, main]
    tags: [v*]
  pull_request:
    branches: ['**']

jobs:
  build:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.os == 'macos-latest' && 'x86_64-apple-darwin,aarch64-apple-darwin' || matrix.os == 'ubuntu-latest' && 'x86_64-unknown-linux-gnu,aarch64-unknown-linux-gnu' || 'x86_64-pc-windows-msvc,i686-pc-windows-msvc' }}

      # Windows-specific setup
      - name: Windows Rust setup
        if: matrix.os == 'windows-latest'
        run: |
          rustup target add x86_64-pc-windows-msvc i686-pc-windows-msvc

      # Linux-specific setup
      - name: Linux cross-compilation setup
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          rustup target add aarch64-unknown-linux-gnu

      - name: Set up QEMU
        if: matrix.os == 'ubuntu-latest'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      # Windows: install and run cibuildwheel manually
      - name: Build wheels (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          # Set environment variables directly in PowerShell
          $env:CIBW_BUILD = 'cp311-* cp312-* cp313-*'
          $env:CIBW_ARCHS_WINDOWS = 'AMD64 x86'
          $env:CIBW_BUILD_VERBOSITY = 3
          $env:CIBW_TEST_SKIP = '*-win32'
          
          # Ensure Cargo is in the PATH
          $env:PATH = "$env:USERPROFILE\.cargo\bin;$env:PATH"
          
          # Run cibuildwheel
          python -m pip install cibuildwheel
          python -m cibuildwheel --output-dir wheelhouse

      # Linux and macOS: use the action
      - name: Build wheels (Linux/macOS)
        if: matrix.os != 'windows-latest'
        uses: pypa/cibuildwheel@v2.16.2
        env:
          CIBW_BUILD: 'cp311-* cp312-* cp313-*'
          CIBW_BUILD_VERBOSITY: 3
          CIBW_ARCHS_LINUX: 'x86_64 aarch64'
          CIBW_ARCHS_MACOS: 'x86_64 arm64'
          CIBW_ENVIRONMENT: 'PATH="$HOME/.cargo/bin:$PATH"'
          CIBW_TEST_SKIP: '*-*linux_{aarch64,ppc64le,s390x} *-*macos_arm64'
          CIBW_MANYLINUX_X86_64_IMAGE: 'manylinux2014'
          CIBW_MUSLLINUX_X86_64_IMAGE: 'musllinux_1_1'
          CIBW_BEFORE_BUILD_MACOS: 'rustup target add x86_64-apple-darwin aarch64-apple-darwin'
          # Install Rust inside the Linux build container
          CIBW_BEFORE_ALL_LINUX: >
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y &&
            source $HOME/.cargo/env &&
            rustup target add x86_64-unknown-linux-gnu

      - name: Build sdist
        if: matrix.os == 'ubuntu-latest'
        run: |
          pip install build
          python -m build --sdist

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packages-${{ matrix.os }}
          path: |
            ./wheelhouse/*.whl
            ./dist/*.tar.gz
          if-no-files-found: error