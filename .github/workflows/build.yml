name: Build

on:
  push:
    branches: [stable, main]
    tags: [v*]
  pull_request:
    branches: ['**']

jobs:
  build:
    if: startsWith(github.ref, 'refs/tags/') || contains(github.event.head_commit.message, '[full-build]')
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-24.04-arm, windows-latest, macos-13, macos-14]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: >-
            ${{ (matrix.os == 'macos-13' && 'x86_64-apple-darwin') ||
                (matrix.os == 'macos-14' && 'aarch64-apple-darwin') ||
                (matrix.os == 'ubuntu-latest' && 'x86_64-unknown-linux-gnu,aarch64-unknown-linux-gnu,powerpc64le-unknown-linux-gnu') ||
                (matrix.os == 'ubuntu-24.04-arm' && 'aarch64-unknown-linux-gnu') ||
                (matrix.os == 'windows-latest' && 'x86_64-pc-windows-msvc,i686-pc-windows-msvc') ||
                '' }}

      # Linux-specific setup for cross-compilation host
      - name: Linux cross-compilation setup
        if: matrix.os == 'ubuntu-latest' # Runs on the x64 host
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu gcc-powerpc64le-linux-gnu g++-powerpc64le-linux-gnu

      - name: Set up QEMU
        if: runner.os == 'Linux' && runner.arch == 'X64' # For emulating other archs on x64 Linux runner
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all # arm64, ppc64le etc.

      # Windows: install and run cibuildwheel manually
      - name: Build wheels (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          # Set environment variables directly in PowerShell
          $env:CIBW_ARCHS_WINDOWS = 'auto'
          $env:CIBW_BUILD_VERBOSITY = 3

          # Ensure Cargo is in the PATH
          $env:PATH = "$env:USERPROFILE\.cargo\bin;$env:PATH"

          # Run cibuildwheel
          python -m pip install cibuildwheel
          python -m cibuildwheel --output-dir wheelhouse

      # Linux and macOS: use the action
      - name: Build wheels (Linux/macOS)
        if: matrix.os != 'windows-latest'
        uses: pypa/cibuildwheel@v2.23.2
        env:
          CIBW_BUILD_VERBOSITY: 3
          CIBW_ARCHS_LINUX: ${{ matrix.os == 'ubuntu-24.04-arm' && 'aarch64' || 'x86_64 aarch64 ppc64le i686' }}
          CIBW_ARCHS_MACOS: 'auto'
          CIBW_ENVIRONMENT: 'PATH="$HOME/.cargo/bin:$PATH"'
          CIBW_BEFORE_ALL_LINUX: >
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y &&
            source $HOME/.cargo/env
          CIBW_SKIP: "*-musllinux_i686"
          CIBW_BEFORE_BUILD_MACOS: >
            rustup target add x86_64-apple-darwin aarch64-apple-darwin
          MACOSX_DEPLOYMENT_TARGET: 10.12
          CIBW_MANYLINUX_X86_64_IMAGE: "quay.io/pypa/manylinux2014_x86_64:latest"
          CIBW_MANYLINUX_I686_IMAGE: "quay.io/pypa/manylinux2014_i686:latest"
          CIBW_MANYLINUX_AARCH64_IMAGE: "quay.io/pypa/manylinux2014_aarch64:latest"
          CIBW_MANYLINUX_PPC64LE_IMAGE: "quay.io/pypa/manylinux2014_ppc64le:latest"
          CIBW_MANYLINUX_S390X_IMAGE: "quay.io/pypa/manylinux2014_s390x:latest"
          CIBW_MUSLLINUX_X86_64_IMAGE: "quay.io/pypa/musllinux_1_2_x86_64:latest"
          CIBW_MUSLLINUX_I686_IMAGE: "quay.io/pypa/musllinux_1_2_i686:latest"

      - name: Build sdist
        if: matrix.os == 'ubuntu-latest'
        run: |
          pip install build
          python -m build --sdist

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packages-${{ matrix.os }}
          path: |
            ./wheelhouse/*.whl
            ./dist/*.tar.gz
          if-no-files-found: error
