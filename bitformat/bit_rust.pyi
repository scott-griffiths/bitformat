from collections.abc import Sequence

class BitRust:
    @classmethod
    def from_bytes(cls, b: bytes) -> 'BitRust': ...
    @classmethod
    def from_bin(cls, s: str) -> 'BitRust': ...
    @classmethod
    def from_bin_checked(cls, s: str) -> 'BitRust': ...
    @classmethod
    def from_hex(cls, s: str) -> 'BitRust': ...
    @classmethod
    def from_hex_checked(cls, s: str) -> 'BitRust': ...
    @classmethod
    def from_oct(cls, s: str) -> 'BitRust': ...
    @classmethod
    def from_oct_checked(cls, s: str) -> 'BitRust': ...
    @classmethod
    def from_zeros(cls, n: int) -> 'BitRust': ...
    @classmethod
    def from_ones(cls, n: int) -> 'BitRust': ...
    @classmethod
    def join(cls, bitrusts: list['BitRust']) -> 'BitRust': ...

    def __len__(self) -> int: ...
    def __iter__(self) -> 'BitRustIterator': ...
    def __eq__(self, other: 'BitRust') -> bool: ...
    def __and__(self, other: 'BitRust') -> 'BitRust': ...
    def __or__(self, other: 'BitRust') -> 'BitRust': ...
    def __xor__(self, other: 'BitRust') -> 'BitRust': ...

    def to_bytes(self) -> bytes: ...
    def to_bin(self) -> str: ...
    def to_hex(self) -> str: ...
    def to_oct(self) -> str: ...
    def to_int_byte_data(self, signed: bool) -> bytes: ...

    def getindex(self, index: int) -> bool: ...
    def getslice(self, start: int, end: int | None) -> 'BitRust': ...
    def getslice_with_step(self, start: int, stop: int, step: int) -> 'BitRust': ...
    def set_index(self, value: bool, index: int) -> 'BitRust': ...
    def set_from_slice(self, value: bool, start: int, stop: int, step: int) -> 'BitRust': ...
    def set_from_sequence(self, value: bool, indices: Sequence[int]) -> 'BitRust': ...

    def all_set(self) -> bool: ...
    def any_set(self) -> bool: ...
    def count(self) -> int: ...
    def invert(self) -> 'BitRust': ...
    def invert_all(self) -> 'BitRust': ...
    def invert_single_bit(self, pos: int) -> 'BitRust': ...
    def invert_bit_list(self, pos: list[int]) -> 'BitRust': ...
    def reverse(self) -> 'BitRust': ...

    def find(self, pattern: 'BitRust', start: int, byte_aligned: bool) -> int: ...
    def findall(self, pattern: 'BitRust', byte_aligned: bool) -> list[int]: ...
    def rfind(self, pattern: 'BitRust', start: int, byte_aligned: bool) -> int: ...

class BitRustIterator:
    def __iter__(self) -> 'BitRustIterator': ...
    def __next__(self) -> bool: ...